<netty>
    <BootStrap>
        <tag>
            主要提供网络IO框架的初始配置，使用封装功能。如配置NioEventLoop，配置channel选项，配置channel所属pipeline的出入handler集合，封装nio使用等功能。
        </tag>
        <tag>
            提供了bind（）和connect（）方法。netty是基于nio的网络框架，实际上是对jdk中nio的包装实现，封闭以及简化了使用NIO的复杂操作。一般使用NIO的步骤如下：
                1）声明一个selector
                2）声明一个channel，对于服务端是声明一个ServerSocketChannel，bind到某个端口；对于客户端是声明一个SocketChannel，connect到某个远程地址和端口。
                3）将channel注册到selector上，并声明感兴趣的事件。（accept、connect、read、write）
                4）通过selector的select方法获取到触发事件的channel，进行相应业务操作。
            其中1,2,3步是使用初始化手段，bootStrap中的bind（）和connect（）方法就集成封装了这三步动作。
                1）bind（）和connect（）方法通过initAndRegister()方法来进行初始化和注册操作
                2）initAndRegister()由init和register方法构成，init（）方法由AbstractBootStrap的继承类实现（用于服务端的ServerBootstrap和用于客户端的Bootstrap）
                    ,主要是声明channel和设置配置选项，register（）方法则就是把channel注册到eventloop中的selector上。
                3）使用方根据bind（）和connect（）方法返回的channel就可以进行后续的操作，如使用connect方法返回的channel就行write操作。
        </tag>
    </BootStrap>

    <Channel>
        <tag>
            对nio中channel的包装实现（以后所说的channel特指netty实现的对java nio channel封装的channel）。channel中的方法分为两个部分，
            一部分是提供给用户使用的方法，这部分方法都是通过pipeline来进行。
            另一部分是在unsafe接口里的方法，这部分方法都是通过封装的java nio Channel来进行实际的io操作，不对用户开放，由框架来使用保证安全性。
            其实通过pipeline来进行的方法最后还是会调用unsafe中的方法来进行实际的io操作，只不过需要经过pipeline进行事先配置的handler处理。
        </tag>
        <tag>
            Channel会作为attach参数注册到selector上，所以每次通过Selector.select()得到selectorkey时就可以从attach取到对应的channel。
            然后通过channel从jdk nio 回到netty框架上，由netty框架来封装NIO操作。
        </tag>
    </Channel>

    <EventLoop>
        异步任务执行器Executor和NIO事件循环（selector）的结合体，即代表一个异步任务处理器，又代表NIO的selector的框架实现（register、循环selector）。
        Channel的所有操作都是异步，每个通过Channel的操作都会把Channel包装成ChannelFuture对象，并返回这个ChannelFuture对象。
        然后通过EventLoop异步对这个ChannelFuture对象进行相应的IO操作，客户端可以根据ChannelFuture对象观察到相应操作的执行情况
    </EventLoop>

    <ChannelFuture>
        future模式其实是一种将同步执行的方法异步化的方式，比如类Channel有个方法register，表示将channel注册到selector中，一般同步方式就是当前channel对象直接调用
        channel.register();方法执行完正常返回后channel就注册成功到了selector上了。变成future模式的话就是加一个方法register(ChannelPromise).
        ChannelPromise是netty中对Future的进一步的拓展，拓展版的ChannelFuture对象，可以添加Listener，在任务处理到某个状态（失败、成功、异常）执行相应listener集合。
        register(ChannelPromise)会调用同步方法register（）执行实际的注册动作，同时会在任务处理到某个状态（失败、成功、异常）时更新ChannelPromise对象的状态。
        这样持有ChannelPromise对象的调用者就可以根据观察到的ChannelPromise的状态执行相应的动作。
        一般会把register(ChannelPromise)的调用封装成一个线程任务交给一个异步任务处理器调用，这样就实现了异步化
    </ChannelFuture>

    <PipeLine>
       <tag>
           读写handler管道容器，每个Channel持有一个pipeline对象，对于channel的使用方来说，其所有操作都被交给pipeline来进行。
           pipeline将读取到的msg或者要write的msg经过过滤的handler处理后再通过channel本身的unsafe接口定义的io操作方法进行实际的io操作。
       </tag>
        <tag>
            Pipeline中有两个默认的Handler，Headhandler和TailHandler，分别代表handler链的头和尾，这两个handler都是同时继承了inputHandler和outHandler接口。
            所有的read操作都会从head开始，经过所有配置的inputHandler处理后到tailHandler。如果在中间某个handler进行了实际的处理就不会往下继续走。即没有调用fireChannelRead方法触发下一个handler
            所有的write操作都会从tailHandler开始，经过所有配置的outHandler处理后到headHandler。最后调用headHandler中调用unsafe.write（）方法进行实际的io操作。
        </tag>
    </PipeLine>

    <ByteBuffer>
        <tag>
            原生的byteBuffer有三个属性：position（读写开始位置）、limit（最大的可读/可写字节数量）、capacity（整个byteBuffer分配的容量）。
                (1)初始化后：position = 0;limit = capacity。此时byteBuffer为空，只能进行写入操作（channel.read(byteBuffer)）。
                (2)通过channel.read(byteBuffer)向byteBuffer写入数据后，position=写入的字节数目;limit=capacity。此时还不能直接从byteBuffer中
            读取数据，因为读取和写入数据是操作position到limit直接的空间。这块空间目前还是待写入部分，没有数据。
               （3）为了读取byteBuffer中写入的数据，首先调用byteBuffer.flip()方法，此时position = 0; limit = 写入的字节数目。此时position到limit的空间就是
            channel.read(byteBuffer)写入的数据。可以进行读取。
               （4）读取完后，调用byteBuffer.clear（）方法，此时：position = 0,limit = capacity;也就是回到了步骤（1）状态。可以进行新一轮的读写操作。
            可见因为jdk中的byteBuffer将读取和写入的操作都统一为对属性position到limit之间存储空间的操作。所以需要在读、写之间进行属性值的切换。

            netty 中的ByteBuf是对于java NIO中的byteBuffer的包装，对byteBuf的使用最终都会转到对其持有的byteBuffer属性上。但是其封装了读写转换的操作
            简化了读写步骤。
            netty中的中的ByteBuf有三个属性：readerIndex（数据读取当前位置） 、writerIndex(数据写入当前位置) 、 capacity（容量）。将读取空间和写入空间进行了分开。
            readerIndex到writerIndex表示可读取的空间段，writerIndex到capacity表示可写入的空间段。不需要再进行读写切换的操作。
                (1)初始化后readerIndex和writerIndex都为0；headByteBuf持有一个字节数组array；DirectByteBuf则持有一个ByteBuffer。
                (2)对ByteBuf的读写操作都会最终变成对原生的ByteBuffer的读写上。
               （3）ByteBuf需要和netty的Channel配合使用，netty的Channel是对java NIO Channel的包装实现，ByteBuf是对JavaNIO 中的ByteBuffer的包装实现，
            两者配合起来，最终还是通过原生的Channel和byteBuffer进行网络读写操作。
        </tag>

        <tag>
            byteBuf对象池
        </tag>


        <tag>
            byteBuf内存池
        </tag>



    </ByteBuffer>

    <netty执行结构>
        (1)new NioEventLoopGroup(num); NioEventLoopGroup代表netty中的NioEventLoop IO线程组，num是IO线程NioEventLoop的数量。
           NioEventLoopGroup会把需要register的Channel（一般是在connect（）和bind（）方法时首先进行init和register）按照设定的调度规则注册到IO线程组中的其中一个NioEventLoop上(由next()方法返回)，
            然后就由该IO线程处理该channel的IO操作。
        (2) 每个IO线程NioEventLoop拥有一个单独的NIO中的Selector。每个IO线程就是不断轮询自己的selector，获取感兴趣的IO事件进行处理。
        （3）每个IO线程NioEventLoop又是个异步任务处理器（EventExecutor），会不断循环执行添加到其中的task。
        (4)当IO线程不断轮询自己的selector，获取到某个channel有感兴趣的IO事件发生时时，会执行该channel对应事件的操作（如读事件对应的unsafe.read（）方法）,read方法会把操作交给pipeline，
        pipeline会从默认的head handler开始，依次执行配置的handler。
        （5）在开始执行每个handler时，会检查handler对象在初始化时有没有配置所属的executor，默认是没有的，executor就是当前的NioEventLoop（也就是在同一个IO线程顺序执行handler的业务逻辑）。
            配了的话就会把handler对象对应方法的的执行封装成一个task，交给配置的executor执行。即单独的业务线程池。
        （6）也可以在handler对象设置一个业务线程池属性，在方法执行体内将执行的逻辑封装成一个task交给设置的业务线程池，这种就是不经过netty，自己控制业务线程池以及业务task的添加逻辑。

        综上所述：netty的执行框架是由n个IO线程和每个handler的业务线程池构成。其中n>=1，业务线程池可以为null，这样的话所有IO业务都会在所属的IO线程中执行。
    </netty执行结构>

</netty>